I started by creating a package called Snake, a class called Snake and a class called GamePanel.
The Snake class which would start the game and contain the event handlers for the mouse and keys and the GamePanel.
It contains code on what the game looks like. 

The Snake class contains a constructor, a method to begin the game, 2 methods that will end the game and a main method. 
The main method is where the running of the game will start. The 2 methods that will end the game are the actionperformed method and ‘OverTouchTail’.
These methods are needed to end the game. In the program there are two ways to game over; touch the wall or touch the snake’s own tail.
It also implements KeyListener, ActionListener and MouseListener interfaces which means the class will also contain the inherited abstract methods keyReleased, keyTyped, keyPressed, mouseClicked, mousePressed, mouseEntered, mouseExited and mouseReleased.
However, not all these methods contain code as they aren’t needed for this particular game.
These are used later for the keys, which will change direction of the snake, and for the mouse clicker which is used to count the clicks in the game.
 
The code of the Snake class starts with protected variables being instantiated or created for later use in the application, this also includes the creation of ArrayList<Point> snekbody.
Some of these were added here a lot later in development of the code. The next piece of code is the ‘BeginGame’ method which begins the game.
I have set Boolean ‘gameover’ as false as the game cannot have a gameover on beginning and have then some variables that were instantiated above.
I have made it so the snake start position will start at a specific point and start by being in the right direction (going right) by setting direct (direction variable) to 2 (which is RIGHT).
I have also created the random variable which is then used to make the shape (snekshape), that will earn you points for collecting, that is a new Point of random.nextInts.
This will make the shape appear in a random point of the gameboard (creating in the other class) of a specified area. 

The BeginGame method sets variables 'secs', 'time' and 'myscore' to zero because at game start you have not earned any points. 
The method will then clear the snake’s body if it has any extra parts it shouldn’t have and will then start the timer which is used in the other class to show the time on screen. 
The next code in this class is for the Snake constructor. 
Here the JFrame frame1 is created and has all its components set and added to it and at the end calls the BeginGame method to start the game.
The frame adds a panel of ‘GamePanel’ (the other class) which contains the background, border, colour of the snake etc.
I have set the size of the frame to (416, 440) as this size if just slightly bigger than the 20x20 square grid and have here added the MouseListener and KeyListener to the frame so the key and mouse events are able to work on this frame.
Underneath the constructor is the main method which will print “Game Start” then creates a new Snake named ‘snake’.

I have then created the key events, keyReleased and KeyTyped do not need to contain anything as we don’t need the snake to do anything but change direction when an arrow key is pressed. In keyPressed(Keyevent k) an int is created which is equal to the key code.  These if statement say that if the keycode shows that an arrow key had been pressed and the direction is not the opposite direction then the direction equals the opposing direction (if not down then direction is up). The if statement must include not the opposing direction because otherwise the snake may be able to go into its own body and cause a game over. As a later method shows that when the snake touched its body or tail the game ends.  
The next method (actionlistener) contains code which can control the speed of the snake and timer and end the game if the snake touched a wall. Ideas for this piece of code I got from watching the video https://www.youtube.com/watch?v=S_n3lryyGZM (by Jaryt Bustard) which was posted on 17 Feb 2014, I have used a similar sort of method to end the game when the snake touches the walls or its body. I have taken some ideas from this video and have used some if statements which are similar to the if statements produced in the video. I also got an idea of how to do my OverTouchTail method from this video but have done it in a slightly different way. 
This method makes it so the game ends when the snake goes past 39 horizontally or 39 vertically, so if the snake goes off the 20x20 square grid it is game over. 
The final pieces of code for this method contain the OverTouchTail method and the mouse events which if the mouse is clicked the variable mouseclicks increases by 1 for each 1 click. These clicks are then printed on screen, code for this is in the GamePanel class. The OverTouchTail method uses a for loop which can tell the position of the snake body parts and if the snake head hits them a game over occurs. 
The second class GamePanel extends JPanel and contains the initialization of all the variable that will be used in later methods. The paintComponent method contains code that will draw the gray background rectangle and the border of the game made of 20 vertical and 20 horizontal rectangles of height and width 20. The head of the snake is then created using g.fillOval at the points snake.snekHead.x and snake.snekHead.x, because it will not have a fixedpoint as it will be moving with the rest of the snake, of colour magenta. I have then written code that will set the colour, font and size of the string specified on the game, which is positioned at the bottom. This string will show the current time, score, clicks and length of snake you have. Then is the code for the colour of the shape that is collected by the snake which only does not have a fixed position as it will be moving randomly. The code then contains an if statement which states if there is a gameover then the score and time at the end of the game are equal to an int and “YOU LOSE” will appear on screen in a specified font, size, and position. The score will be used in a later method to be written into the scoreboard.txt and the scoreboard24hour.txt, with hold the scores. Then two high score boards are printed and 4 methods are called. The integers that are printed underneath the score boards are equal to the top ten scores of the scores that were contained in the text files. The writeScore and write24hour methods that are called will write to or create the specified file and will write in the text files (each one being on a new line) the score taken from that game. The writeScore24hour method contains some extra code which will schedule the file to be deleted every 24 hours at a specific time (for 7days) so the 24 hour scoreboard will only contain the top ten scores within the last 24 hours. The file is deleted with the code in the TimerTask method ‘delete24hourscore’. The next two methods called, getScore and getScore 24 hour read the file, split each word by “ ” and add each score to an array. The array is then sorted to put the scores in ascending order and reverse to have the scores in descending order. The integers that were instantiated at the beginning of the class are then set to the top ten scores of highscores. These are the scores which are printed at the end of the game on the scoreboard.
